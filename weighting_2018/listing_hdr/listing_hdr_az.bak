/* Make an ASCII file to list the relevant phases crossing the target region.
It distinguishes between phases for the minor and major arc 
It reads an input file with a station list:
if flag=0 it will list only phases recorded at stations in the list
if flag=1 it will list only phases recorded at stations not in the list 
patch for autopicking bug added (Federica Nov 10, 2006) */

#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <assert.h>
#include "../acal/const.h"
#include "../acal/structwavket_A3z.h"
#include "../acal/dimensiony.h"
#define EPS 1.0e-5

extern void stop();
extern void midpoint();
extern int fgetrecord();
extern int dataselector_auto();
extern float ***farray3();
extern char **carray2();
extern void free_farray3();
int check_station();

main(int argc,char **argv)
{
char string[120],**stat;
int wph,wpd,wpN,nwp,nread,nstat,ifstat,flag;
int size; //long to int
FILE *file;
float ths1,phs1,dep1,thr1,phr1,dis1,smp1,t01,rmsd1,rmsr1,wgt1;
float ths2,phs2,dep2,thr2,phr2,dis2,smp2,t02,rmsd2,rmsr2,wgt2;
float rmss1,rmss2;
float thm1,thm2,thm,phm1,phm2,phm;
float ***B;
int i,JJ,ndata1,ndata2,iwp1,iwp2,minor,major,first_orbit,ksmax;
int ifcode,ifmoment,ifdepth,ifsloctn,ifrloctn,ifdist,ifsmplint,ifcomp;
int ifnetwk,ifchnnl,ifphaseid,ifndata,ifwwindow,ifgwindow,ifpwindow;
int ifrmsd,ifrmsr,ifweight,ifrmss,onlysrc,ifstn;
double dum,diff;

title_st title;
tracehdrHH_st trace;
tracehdrAreg_st traceA;
packhdrbr_st packhdr;
sphA1zreg_st Aknot[MAXKNOT];
  
  strncpy(string,argv[1],8);
  strncpy(&string[8],".wpH\0",5);
  wph=open(string,0);
  string[11]='d';
  wpd=open(string,0); 
  string[11]='N';
  wpN=open(string,0); 
  
  file=fopen("lu_filter.par","r");
  fgetrecord(file,string);sscanf(string,"%g %g",&ths2,&ths1);
  fgetrecord(file,string);sscanf(string,"%g %g",&phs1,&phs2);
  fgetrecord(file,string);sscanf(string,"%g %g",&dep1,&dep2);
  fgetrecord(file,string);sscanf(string,"%g %g",&thr2,&thr1);
  fgetrecord(file,string);sscanf(string,"%g %g",&phr1,&phr2);
  fgetrecord(file,string);sscanf(string,"%g %g",&dis1,&dis2);
  fgetrecord(file,string);sscanf(string,"%g %g",&smp1,&smp2);
  fgetrecord(file,string);sscanf(string,"%g %g",&t01,&t02);
  fgetrecord(file,string);sscanf(string,"%g %g",&rmsd1,&rmsd2);
  fgetrecord(file,string);sscanf(string,"%g %g",&rmsr1,&rmsr2);
  fgetrecord(file,string);sscanf(string,"%g %g",&rmss1,&rmss2);
  fgetrecord(file,string);sscanf(string,"%g %g",&wgt1,&wgt2);
  fgetrecord(file,string);sscanf(string,"%d %d",&ndata1,&ndata2);
  fgetrecord(file,string);sscanf(string,"%d %d",&iwp1,&iwp2);
  fgetrecord(file,string);sscanf(string,"%g %g",&thm2,&thm1);
  fgetrecord(file,string);sscanf(string,"%g %g",&phm1,&phm2);
  fclose(file);
  
  ths1=(90.-ths1)*CONV; ths2=(90.-ths2)*CONV;
  thr1=(90.-thr1)*CONV; thr2=(90.-thr2)*CONV;
  thm1=(90.-thm1)*CONV; thm2=(90.-thm2)*CONV;
  phs1*=CONV; phs2*=CONV; phr1*=CONV; phr2*=CONV; 
  phm1*=CONV; phm2*=CONV; 
  dis1*=CONV; dis2*=CONV; 
/*  printf("ths1 %f ths2 %f phs1 %f phs2 %f\n",ths1,ths2,phs1,phs2);*/
    
  onlysrc=0;

  file=fopen("lu_list.par","r");
  fgetrecord(file,string);sscanf(string,"%d",&ifcode);
  fgetrecord(file,string);sscanf(string,"%d",&ifmoment);
  fgetrecord(file,string);sscanf(string,"%d",&ifdepth);
  fgetrecord(file,string);sscanf(string,"%d",&ifsloctn);
  fgetrecord(file,string);sscanf(string,"%d",&ifrloctn);
  fgetrecord(file,string);sscanf(string,"%d",&ifdist);
  fgetrecord(file,string);sscanf(string,"%d",&ifsmplint);
  fgetrecord(file,string);sscanf(string,"%d",&ifcomp);
  fgetrecord(file,string);sscanf(string,"%d",&ifnetwk);
  fgetrecord(file,string);sscanf(string,"%d",&ifchnnl);
  fgetrecord(file,string);sscanf(string,"%d",&ifphaseid);
  fgetrecord(file,string);sscanf(string,"%d",&ifndata);
  fgetrecord(file,string);sscanf(string,"%d",&ifwwindow);
  fgetrecord(file,string);sscanf(string,"%d",&ifgwindow);
  fgetrecord(file,string);sscanf(string,"%d",&ifpwindow);
  fgetrecord(file,string);sscanf(string,"%d",&ifrmsd);
  fgetrecord(file,string);sscanf(string,"%d",&ifrmsr);
  fgetrecord(file,string);sscanf(string,"%d",&ifrmss);
  fgetrecord(file,string);sscanf(string,"%d",&ifweight);
  fgetrecord(file,string);sscanf(string,"%d",&ifstn);
  fclose(file);
  
  /* Read station list */
  if((file=fopen("lu_station.par","r"))==0)
    stop("listinghdrs_auto_station.c: cannot open lu_station.par");
  nstat=0;
  while(fgetrecord(file,string)>0) nstat++;
/*  printf("%d stations in the list\n",nstat);*/
  rewind(file);
  
  stat=carray2(0,nstat-1,0,3);
  for (i=0;i<nstat;i++) {
    fgetrecord(file,string);
    sscanf(string,"%s",&stat[i][0]);
/*    printf("Stat: %.4s\n",stat[i]);*/
  }
  fclose(file);
  
  read(wph,&title,sizeof(title));
  if (title.phi<0.0) title.phi+=2.*PI;
  
  if (title.theta<ths1 || title.theta>ths2 ||
     title.phi<phs1 || title.phi>phs2 ||
     title.depth<dep1 || title.depth>dep2) {
/*       printf("thetas %f phis %f\n",title.theta,title.phi);*/
     stop("listinghdrs_auto_station_az: error");
     }
  if (ifrloctn==0 && ifdist==0 && ifsmplint==0 && ifcomp==0 && ifnetwk==0 && ifchnnl==0 && ifphaseid==0 && ifndata==0 && ifwwindow==0 && ifgwindow==0 && ifpwindow==0 && ifrmsd==0 && ifrmsr==0 && ifrmss==0 && ifweight==0) onlysrc=1;
  
  if (onlysrc) {
     if (ifcode) printf("%.8s ",title.event);
     if (ifmoment) printf("%9.3e %9.3e %9.3e %9.3e %9.3e %9.3e ",
                title.moment.rr, title.moment.tt, title.moment.pp, 
                title.moment.rt, title.moment.rp, title.moment.tp);
     if (ifdepth) printf("%5.1f ",title.depth/1000.);
     if (ifsloctn) printf("%6.3f %6.3f ",title.theta,title.phi);
     printf(" %6.3f ",title.dt);
     printf("\n");
     stop("listinghdrs_auto_station_az: error");
  }
 
  while (read(wph,&trace,sizeof(trace))==sizeof(trace)) {
    lseek(wpN,trace.locatnA,0);  
    read(wpN,&traceA,sizeof(traceA));
    //printf("Printing");
    minor=0;
    major=0;    
    
    //printf("traceA.neffkreg %d trace.theta %f trace.phi %f\n",traceA.neffkreg,trace.theta,trace.phi);
    //fflush(stdout);
     
    if (traceA.neffkreg!=0) {
      /*printf("neffk %d reg %d\n",traceA.neffk,traceA.neffkreg);
      fflush(stdout); */

      B=farray3(0,traceA.neffk-1,0,SMAX*2,0,4);

      for (i=0;i<traceA.neffk;i++) {
        if (read(wpN,&Aknot[i],sizeof(Aknot[i]))!=sizeof(Aknot[i])) {
          printf("%.8s\n",title.event);
	  stop("listinghdrs_auto: error in loading wpA 1");
        }
/*	printf("\nphi %f theta %f reg %d index %d indexreg %d\n",Aknot[i].phi,Aknot[i].theta,Aknot[i].reg,Aknot[i].index,Aknot[i].indexreg);
    fflush(stdout);*/

        ksmax=Aknot[i].smax;
        if (ksmax>SMAX) stop("acal_A3_anis_cl: SMAX too small");     
        if (ksmax>0) {
          for(JJ=1;JJ<=ksmax*2;JJ++)
            if (read(wpN,&B[i][JJ][0],5*sizeof(float))!=5*sizeof(float))
	      stop("listinghdrs_auto: error in loading wpA 2");     
        }
	
	if (Aknot[i].reg == 1) {
	  if (Aknot[i].rphi<0) Aknot[i].rphi=Aknot[i].rphi+2*PI;
	  if (Aknot[i].rphi>=0 && Aknot[i].rphi<=trace.delta) {
	    minor++;
/*	    printf("Minor rphi %f, delta %f indexreg %d\n",Aknot[i].rphi,trace.delta,Aknot[i].indexreg);*/
	  } else if (Aknot[i].rphi>trace.delta && Aknot[i].rphi<2*PI) {
	    major++;
/*	    printf("Major rphi %f, delta %f indexreg %d\n",Aknot[i].rphi,trace.delta,Aknot[i].indexreg);*/
	  } else {
	    printf("rphi %f, delta %f\n",Aknot[i].rphi,trace.delta);
	    stop("listinghdrs_auto: error invalid values");
	  }
        }
      }

      sscanf(argv[2],"%d",&flag);
/*      printf("flag %d nstat %d\n",flag,nstat);
      fflush(stdout);*/
      ifstat=check_station(nstat,trace,stat,flag);
      
/*      printf("minor %d major %d\n",minor,major);
      fflush(stdout);*/
      midpoint(title.theta,title.phi,trace.theta,trace.phi,&thm,&phm);
/*      printf("trace.theta %f thr1 %f thr2 %f\n",trace.theta,thr1,thr2);
      printf("trace.phi %f phr1 %f phr2 %f\n",trace.phi,phr1,phr2);
      printf("thm %f thm1 %f thm2 %f\n",thm,thm1,thm2);
      fflush(stdout);*/
      if (trace.theta   >=thr1 && trace.theta   <=thr2 &&
         trace.phi     >=phr1 && trace.phi     <=phr2 &&
         thm           >=thm1 && thm           <=thm2 &&
         phm           >=phm1 && phm           <=phm2 &&
         trace.delta   >=dis1 && trace.delta   <=dis2 &&
         trace.smplintv>=smp1 && trace.smplintv<=smp2 &&
	 ifstat==1) {
        lseek(wpd,trace.locatn,0);
        nwp=0;
        do {
          if (!(nread=read(wpd,&packhdr,sizeof(packhdr)))) break;
          if (nread!=sizeof(packhdr)) stop("listinghdrs: error 1");
          if (packhdr.id!=trace.id) break;
	  size=(off_t)packhdr.ndata*sizeof(float);  
          lseek(wpd,(off_t)size,1);
/*          if (wgt2>1.e20) packhdr.weight=0.0;*/
          if (packhdr.t0    >=t01    && packhdr.t0    <=t02   &&
             packhdr.rmsd  >=rmsd1  && packhdr.rmsd  <=rmsd2 &&
             packhdr.rmsr  >=rmsr1  && packhdr.rmsr  <=rmsr2 &&
             packhdr.rmss  >=rmss1  && packhdr.rmss  <=rmss2 &&
             packhdr.weight>=wgt1   && packhdr.weight<=wgt2  &&
             packhdr.ndata >=ndata1 && packhdr.ndata <=ndata2)
	     
	     if (packhdr.phase>0 || packhdr.phase==-11 || packhdr.phase==-21 ||
	     packhdr.phase==-31 || packhdr.phase==-41 || packhdr.phase==-51 ||
	     packhdr.phase==-61) {
	       first_orbit=1;
	     } else first_orbit=0;

          diff=modf((packhdr.t0+title.dt)/trace.smplintv,&dum);

          if (dataselector_auto(&packhdr,trace.delta,trace.netwk,trace.chnnl,trace.comp) 
	  && (fabs(diff)<EPS || fabs(1.0-diff)<EPS)
	  && ((first_orbit==1 && minor!=0) || (first_orbit==0 && major!=0)))
          { nwp++;
            if (nwp>iwp2) break;
            if (nwp>=iwp1) {
              if (ifcode)    printf("%.8s ",title.event);
              if (ifmoment)  printf("%9.3e %9.3e %9.3e %9.3e %9.3e %9.3e ",
                title.moment.rr, title.moment.tt, title.moment.pp, 
                title.moment.rt, title.moment.rp, title.moment.tp);
              if (ifdepth)   printf("%5.1f ",title.depth/1000.);
              if (ifsloctn)  printf("%6.3f %6.3f ",title.theta,title.phi);
              if (ifrloctn)  printf("%6.3f %6.3f ",trace.theta,trace.phi);
              if (ifdist)    printf("%6.3f ",trace.delta);
              if (ifsmplint) printf("%4.0f ",trace.smplintv);
              if (ifcomp)    printf("%c ",trace.comp);
              if (ifnetwk)   printf("%.4s ",trace.netwk);
              if (ifchnnl)   printf("%.4s ",trace.chnnl);
              if (ifphaseid) printf("%3d ",packhdr.phase);
              if (ifndata)   printf("%3d ",packhdr.ndata);
              if (ifwwindow) printf("%9.3e %9.3e %9.3e %9.3e ",
                trace.w1,trace.w2,trace.w3,trace.w4);
              if (ifgwindow) printf("%9.3e %9.3e ",
                packhdr.gv1,packhdr.gv2);
              if(ifpwindow)  printf("%9.3e %9.3e ",
                packhdr.pv1,packhdr.pv2);
              if (ifrmsd)    printf("%9.3e ",packhdr.rmsd);
              if (ifrmsr)    printf("%5.2f ",packhdr.rmsr);
	      if (ifrmss)    printf("%5.2f ",packhdr.rmss);
              if (ifweight)  printf("%9.3e ",packhdr.weight);
              if (ifstn)     printf("%.4s ",trace.stn);
              printf("\n");
            } 
          }
        } while (packhdr.id==trace.id);
      }
    free_farray3(B,0,traceA.neffk-1,0,2*SMAX,0);
    }/*if (traceA.neffkreg!=0)*/
  }
}

/******************************************************************************/
int check_station(nstat,trace,stat,flag)
/* flag=0 looking for stations in the list,
   flag=1 looking for stations not in the list 
   return=0 station should not be considered
   return=1 station should be considered */

int nstat,flag;
tracehdrH_st trace;
char **stat;
{

  int i;
  char station[4];
  
  sscanf(trace.stn,"%s",station);
/*  printf("trace %.4s list %.4s\n",station,stat[i]);
  fflush(stdout);*/
    
  for (i=0;i<nstat;i++) {
    if (station[0]==stat[i][0] && station[1]==stat[i][1] &&
        station[2]==stat[i][2] && station[3]==stat[i][3]) {
/*	printf("trace %.4s list %.4s\n",station,stat[i]);
	fflush(stdout);*/
	if (flag==0) return(1);
  	else return(0);
    }  
  }
  if (flag==0) return(0);
  else return(1);
}	
